// <auto-generated />
using System;
using BeautyWebAPI.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeautyWebAPI.Migrations
{
    [DbContext(typeof(BeautyDataContext))]
    [Migration("20220806132228_AddLibraryUser")]
    partial class AddLibraryUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeautyWebAPI.Models.Appointment", b =>
                {
                    b.Property<int>("IDAppoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddTakeOffAppoint")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAppoint")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDBraiderAppoint")
                        .HasColumnType("int");

                    b.Property<int>("IDClientAppoint")
                        .HasColumnType("int");

                    b.Property<int>("IDLenghtAppoint")
                        .HasColumnType("int");

                    b.Property<int>("IDStyleAppoint")
                        .HasColumnType("int");

                    b.Property<int?>("IdBraiderOwner")
                        .HasColumnType("int");

                    b.Property<int>("IdSizeAppoint")
                        .HasColumnType("int");

                    b.Property<int?>("NumberTrack")
                        .HasColumnType("int");

                    b.Property<string>("StateAppoint")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Typeservice")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("clientIDClient")
                        .HasColumnType("int");

                    b.Property<int?>("lengthIdExtrat")
                        .HasColumnType("int");

                    b.Property<int?>("sizeIdSize")
                        .HasColumnType("int");

                    b.Property<int?>("styleIdStyle")
                        .HasColumnType("int");

                    b.HasKey("IDAppoint");

                    b.HasIndex("clientIDClient");

                    b.HasIndex("lengthIdExtrat");

                    b.HasIndex("sizeIdSize");

                    b.HasIndex("styleIdStyle");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Client", b =>
                {
                    b.Property<int>("IDClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CelClient")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CountyClient")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("DOBClient")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailClient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FnameClient")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<string>("LnameClient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MnameClient")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneClient")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("SexClient")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("StateClient")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StreetClient")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserIDUser")
                        .HasColumnType("int");

                    b.Property<string>("ZipCodeClient")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IDClient");

                    b.HasIndex("UserIDUser");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Color", b =>
                {
                    b.Property<int>("IdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TitleColor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdColor");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Discount", b =>
                {
                    b.Property<int>("IDDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CostDiscount")
                        .HasColumnType("float");

                    b.Property<float>("RateDiscount")
                        .HasColumnType("real");

                    b.Property<string>("TitleDiscount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDDiscount");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Extrat", b =>
                {
                    b.Property<int>("IdExtrat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleExtrat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdExtrat");

                    b.ToTable("Extrats");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.ExtratStyle", b =>
                {
                    b.Property<int>("IdExtratStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CostBusyExtra")
                        .HasColumnType("float");

                    b.Property<double>("CostExtra")
                        .HasColumnType("float");

                    b.Property<double>("CostExtraSize")
                        .HasColumnType("float");

                    b.Property<double>("CostHairDeductExtra")
                        .HasColumnType("float");

                    b.Property<double>("CostTouchUpExtra")
                        .HasColumnType("float");

                    b.Property<int>("IDExtrat")
                        .HasColumnType("int");

                    b.Property<int>("IdSize")
                        .HasColumnType("int");

                    b.Property<int>("IdStyle")
                        .HasColumnType("int");

                    b.HasKey("IdExtratStyle");

                    b.HasIndex("IdSize");

                    b.HasIndex("IdStyle");

                    b.ToTable("ExtratStyles");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.HistoryAppointJob", b =>
                {
                    b.Property<int>("IdJHistoryAppointJob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AddTakeOffAppoint")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateJobHistory")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDAppoint")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int?>("IdLenght")
                        .HasColumnType("int");

                    b.Property<int?>("IdSize")
                        .HasColumnType("int");

                    b.Property<int?>("IdStyle")
                        .HasColumnType("int");

                    b.Property<int?>("NumberTrack")
                        .HasColumnType("int");

                    b.Property<string>("StateJobHistory")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Typeservice")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("IdJHistoryAppointJob");

                    b.ToTable("HistoryAppointJobs");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Size", b =>
                {
                    b.Property<int>("IdSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleSize")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdSize");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.State", b =>
                {
                    b.Property<string>("CodeState")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DesignState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CodeState");

                    b.ToTable("States");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Style", b =>
                {
                    b.Property<int>("IdStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CostStyle")
                        .HasColumnType("float");

                    b.Property<double?>("CostTouchUp")
                        .HasColumnType("float");

                    b.Property<string>("DescriptStyle")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("DesigStyle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HairProvStyle")
                        .HasColumnType("bit");

                    b.Property<string>("PictureStyle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("PriceTakeOffHair")
                        .HasColumnType("float");

                    b.HasKey("IdStyle");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Theword", b =>
                {
                    b.Property<int>("IDPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateBeginPw")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEndPw")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<int>("NumConnection")
                        .HasColumnType("int");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IDPassword");

                    b.ToTable("Thewords");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.User", b =>
                {
                    b.Property<int>("IDUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Connectstate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Dateuserexpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProfil")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LibraryUser.Models.AccountLibrary", b =>
                {
                    b.Property<int>("IdAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAddedAccount")
                        .HasColumnType("datetime2");

                    b.HasKey("IdAccount");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("LibraryUser.Models.AssociateLibrary", b =>
                {
                    b.Property<int>("IdAssociate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CelAssociate")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CountyAssociate")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("DOBAssociate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DisplayAccontHeaderA")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAssociate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FnameAssociate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IdRegisterAssociate")
                        .HasColumnType("bit");

                    b.Property<int?>("IdUserAssociate")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAssociateUseRegister")
                        .HasColumnType("bit");

                    b.Property<string>("LnameAssociate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MnameAssociate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("OwnerStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneAssociate")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("StateAssociate")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StreetAssociate")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.Property<string>("ZipCodeAssociate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdAssociate");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Associates");
                });

            modelBuilder.Entity("LibraryUser.Models.ClientLibrary", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CelClient")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CountyClient")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("DOBClient")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailClient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FnameClient")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("LnameClient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MnameClient")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneClient")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("SexClient")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("StateClient")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StreetClient")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.Property<string>("ZipCodeClient")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdClient");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyAccountLibrary", b =>
                {
                    b.Property<int>("IdAccountAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("StateUsed")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdAccountAccount");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdCompany");

                    b.ToTable("CompaniesAccounts");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyAssociateLibrary", b =>
                {
                    b.Property<int>("IdCompanyBraider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAssociate")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.HasKey("IdCompanyBraider");

                    b.HasIndex("IdAssociate");

                    b.HasIndex("IdCompany");

                    b.ToTable("CompaniesAssociates");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyClientLibrary", b =>
                {
                    b.Property<int>("IdCompanyClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.HasKey("IdCompanyClient");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCompany");

                    b.ToTable("CompaniesClients");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyLibrary", b =>
                {
                    b.Property<int>("IdComp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AcceptPartialPay")
                        .HasColumnType("bit");

                    b.Property<string>("AcronymComp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("AmountPayPartialPay")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("CostHairDeduct")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("CostTakeDown")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CountyComp")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DateWorkFrid")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkMond")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkSatu")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkSund")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkThur")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkTues")
                        .HasColumnType("bit");

                    b.Property<bool?>("DateWorkWed")
                        .HasColumnType("bit");

                    b.Property<string>("DesignationComp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailComp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdMainRegister")
                        .HasColumnType("int");

                    b.Property<int?>("IdOwnerBraider")
                        .HasColumnType("int");

                    b.Property<int?>("MaxBraider")
                        .HasColumnType("int");

                    b.Property<float?>("PartPayeBraid")
                        .HasColumnType("real");

                    b.Property<float?>("PercentPayPartialPay")
                        .HasColumnType("real");

                    b.Property<string>("PhoneOffice")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("PhoneOwner")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("StateComp")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<float?>("StateTaxOnBraiding")
                        .HasColumnType("real");

                    b.Property<float?>("StateTaxOnSale")
                        .HasColumnType("real");

                    b.Property<string>("StreetComp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubDomaine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeWorkBegin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeWorkEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteComp")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ZipcodeComp")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("IdComp");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("LibraryUser.Models.SubscriptionLibrary", b =>
                {
                    b.Property<int>("IdSuscript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountIdAccount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateBeginSouscrip")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEndSouscrip")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<int>("PeriodSouscrip")
                        .HasColumnType("int");

                    b.Property<string>("TypeSuscript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdSuscript");

                    b.HasIndex("AccountIdAccount");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("LibraryUser.Models.UserLibrary", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Connectstate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Dateuserexpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProfil")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Appointment", b =>
                {
                    b.HasOne("BeautyWebAPI.Models.Client", "client")
                        .WithMany("Appointment")
                        .HasForeignKey("clientIDClient");

                    b.HasOne("BeautyWebAPI.Models.Extrat", "length")
                        .WithMany("Appointment")
                        .HasForeignKey("lengthIdExtrat");

                    b.HasOne("BeautyWebAPI.Models.Size", "size")
                        .WithMany("Appointment")
                        .HasForeignKey("sizeIdSize");

                    b.HasOne("BeautyWebAPI.Models.Style", "style")
                        .WithMany("Appointment")
                        .HasForeignKey("styleIdStyle");

                    b.Navigation("client");

                    b.Navigation("length");

                    b.Navigation("size");

                    b.Navigation("style");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Client", b =>
                {
                    b.HasOne("BeautyWebAPI.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserIDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.ExtratStyle", b =>
                {
                    b.HasOne("BeautyWebAPI.Models.Size", "Size")
                        .WithMany("ExtratStyles")
                        .HasForeignKey("IdSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyWebAPI.Models.Extrat", "Extrat")
                        .WithMany("ExtratStyles")
                        .HasForeignKey("IdStyle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyWebAPI.Models.Style", "Style")
                        .WithMany("ExtratStyles")
                        .HasForeignKey("IdStyle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extrat");

                    b.Navigation("Size");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("LibraryUser.Models.AssociateLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.UserLibrary", "User")
                        .WithMany("Associates")
                        .HasForeignKey("UserIdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryUser.Models.ClientLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.UserLibrary", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserIdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyAccountLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.AccountLibrary", "Account")
                        .WithMany("CompanyAccount")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryUser.Models.CompanyLibrary", "Company")
                        .WithMany("CompanyAccount")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyAssociateLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.AssociateLibrary", "Associate")
                        .WithMany("CompanyAssociate")
                        .HasForeignKey("IdAssociate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryUser.Models.CompanyLibrary", "Company")
                        .WithMany("CompanyAssociate")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associate");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyClientLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.ClientLibrary", "Client")
                        .WithMany("CompanyClient")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryUser.Models.CompanyLibrary", "Company")
                        .WithMany("CompanyClient")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibraryUser.Models.SubscriptionLibrary", b =>
                {
                    b.HasOne("LibraryUser.Models.AccountLibrary", "Account")
                        .WithMany("Suscriptions")
                        .HasForeignKey("AccountIdAccount");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Client", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Extrat", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("ExtratStyles");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Size", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("ExtratStyles");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.Style", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("ExtratStyles");
                });

            modelBuilder.Entity("BeautyWebAPI.Models.User", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("LibraryUser.Models.AccountLibrary", b =>
                {
                    b.Navigation("CompanyAccount");

                    b.Navigation("Suscriptions");
                });

            modelBuilder.Entity("LibraryUser.Models.AssociateLibrary", b =>
                {
                    b.Navigation("CompanyAssociate");
                });

            modelBuilder.Entity("LibraryUser.Models.ClientLibrary", b =>
                {
                    b.Navigation("CompanyClient");
                });

            modelBuilder.Entity("LibraryUser.Models.CompanyLibrary", b =>
                {
                    b.Navigation("CompanyAccount");

                    b.Navigation("CompanyAssociate");

                    b.Navigation("CompanyClient");
                });

            modelBuilder.Entity("LibraryUser.Models.UserLibrary", b =>
                {
                    b.Navigation("Associates");

                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
